#!/bin/sh
#
# Copyright (C) 2016 Canonical
#   
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
echo -n "kernel smoke test, corrupt data and clean with a scrub: "
TMP=/tmp
VDEV0=${TMP}/pool0-$$.img
VDEV1=${TMP}/pool1-$$.img
VDEV2=${TMP}/pool2-$$.img
VDEV3=${TMP}/pool3-$$.img
VDEV_SZ=128
POOL=pool-smoke-$$
DATA=/${POOL}/random.dat
ZFSFS="test tmp example data1 data2 data3"

dd if=/dev/zero of=${VDEV0} bs=1M count=${VDEV_SZ} > /dev/null 2>&1
dd if=/dev/zero of=${VDEV1} bs=1M count=${VDEV_SZ} > /dev/null 2>&1
dd if=/dev/zero of=${VDEV2} bs=1M count=${VDEV_SZ} > /dev/null 2>&1
dd if=/dev/zero of=${VDEV3} bs=1M count=${VDEV_SZ} > /dev/null 2>&1

zpool create ${POOL} mirror ${VDEV0} ${VDEV1} mirror ${VDEV2} ${VDEV3}
ret=$?
if [ $ret -ne 0 ]; then
	echo "FAILED: zpool create failed, exit code=$ret"
	rm -f ${VDEV0} ${VDEV1} ${VDEV2} ${VDEV3}
	exit 1
fi

#
# Create a file
#
dd if=/dev/urandom of=$DATA bs=1M count=64 > /dev/null 2>&1
sum1=$(md5sum ${DATA} | awk '{print $1}')

#
# Corrupt VDEV0
#
dd if=/dev/zero of=${VDEV0} bs=1M count=${VDEV_SZ} > /dev/null 2>&1
sync

#
# Offline "corrupted" VDEV
#
zpool detach ${POOL} ${VDEV0}
ret=$?
if [ $ret -ne 0 ]; then
	echo "FAILED: zpool detach failed, exit code=$ret"
	zpool destroy ${POOL}
	rm -f ${VDEV0} ${VDEV1} ${VDEV2} ${VDEV3}
	exit 1
fi

#
# Zero corrupted VDEV and re-attach
#
dd if=/dev/zero of=${VDEV0} bs=1M count=${VDEV_SZ} > /dev/null 2>&1
sync
zpool attach ${POOL} ${VDEV1} ${VDEV0} -f
ret=$?
if [ $ret -ne 0 ]; then
	echo "FAILED: zpool attach failed, exit code=$ret"
	zpool destroy ${POOL}
	rm -f ${VDEV0} ${VDEV1} ${VDEV2} ${VDEV3}
	exit 1
fi

resilvering=0
#
# Initial first check
#
n=$(zpool status | grep "resilvering" | wc -l)
if [ $n -gt 0 ]; then
	resilvering=1
fi

#
#  ..and do the scrub
#
i=0
while true
do
	(zpool scrub ${POOL}) > /dev/null 2>&1
	ret=$?
	if [ $ret -ne 0 ]; then
		sleep 1
		i=$((i + 1))
		sleep 1
		if [ $i -gt 900 ]; then
			break
		fi
	else
		break
	fi
done
if [ $ret -ne 0 ]; then
	echo "FAILED: zpool scrub failed after $i attempts, exit code=$ret"
	zpool destroy ${POOL}
	rm -f ${VDEV0} ${VDEV1} ${VDEV2} ${VDEV3}
	exit 1
fi

sum2=$(md5sum ${DATA} | awk '{print $1}')
#
# Checksums must agree
#
if [ x"$sum1" != x"$sum2" ]; then
	echo "FAILED: corrupted data on scrubbed pool"
	zpool destroy ${POOL}
	rm -f ${VDEV0} ${VDEV1} ${VDEV2} ${VDEV3}
	exit 1
fi

zpool destroy ${POOL}
ret=$?
if [ $ret -ne 0 ]; then
	echo "FAILED: zpool destroy failed, exit code=$ret"
	#
	# destroy failed, try to clean up, but this
	# wil probably fail
	#
	rm -f ${VDEV0} ${VDEV1} ${VDEV2} ${VDEV3}
	exit 1
fi

rm -f ${VDEV0} ${VDEV1} ${VDEV2} ${VDEV3}
echo "PASSED"
echo "NOTE: zpool scrub completed after about $i second(s)"
if [ $resilvering -eq 1 ]; then
	echo "NOTE: Resilvering detected + completed and srub completed"
else
	echo "NOTE: Resilvering not detected (too fast to detect) and scrub completed"
fi
exit 0
